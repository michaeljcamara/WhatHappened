diff --git a/Prototype/Assets/Scripts/ClassB.cs b/Prototype/Assets/Scripts/ClassB.cs
index 7424ff2..89f04ea 100644
--- a/Prototype/Assets/Scripts/ClassB.cs
+++ b/Prototype/Assets/Scripts/ClassB.cs
@@ -5,0 +6,2 @@ public class ClassB : MonoBehaviour {
+    public ClassA classA;
+    public ClassB classB;
@@ -6,0 +9 @@ public class ClassB : MonoBehaviour {
+    //TODO WHAT ABOUT INTERFACES?? (clas | interfac) during regex?
@@ -13,0 +17,2 @@ public class ClassB : MonoBehaviour {
+    public List<List<List<ClassD>>> nestedGenericD;
+
@@ -42,0 +48,10 @@ public class ClassB : MonoBehaviour {
+    //TODO rem spacing after brackets braces optional
+    Dictionary<Dictionary<System.Text.StringBuilder, System.Text.StringBuilder[,,,]>, Dictionary<System.Text.StringBuilder[][][], List<System.Text.StringBuilder[][]>>> CrazyMethod(Dictionary<Dictionary<System.Text.StringBuilder, System.Text.StringBuilder[,,,]>, Dictionary<System.Text.StringBuilder[][][], List<System.Text.StringBuilder[][]>>> Arguments) { return null; }
+    int[][] TwoDArrayInts(int[][] someInts) { return null; }
+    int[,] TwoDArrayInts2(int[,] someInts) { return null; }
+    int[][][] ThreeDArrayInts(int[][][] someInts) { return null; }
+    int[,,] ThreeDArrayInts2(int[,,] someInts) { return null; }
+    List<int> ListOfInts2(List<int> someInts2) { return null; }
+    Dictionary<List<int>, Dictionary<List<int>, List<int>>> DictOfLists() { return null; }
+    List<List<int>> ListOfLists(List<List<int>> someInts) { return null; }
+    List<List<System.Text.StringBuilder>> ListOfListsBuilders(List<List<System.Text.StringBuilder>> someBuilders) { return null; }
@@ -44 +59,2 @@ public class ClassB : MonoBehaviour {
-    
+    System.Text.StringBuilder HasParameters(string someString, ClassC someClass, int someInt, System.Text.StringBuilder someBuilder) {
+        System.Text.StringBuilder testBuilder = new System.Text.StringBuilder("");
@@ -45,0 +62,2 @@ public class ClassB : MonoBehaviour {
+        return testBuilder;
+    }
@@ -47,3 +65,28 @@ public class ClassB : MonoBehaviour {
-	// Use this for initialization
-	void Start () {
-		
+    //*TEST WITH ARRAYS< LISTS< GENERICS< ETC
+
+    List<int> ListOfInts(List<int> someInts) { return null; }
+    List<System.Text.StringBuilder> ListOfStringBuilders(List<System.Text.StringBuilder> someStringBuilders) { return null; }
+    int[] ArrayOfInts(int[] someInts) { return null; }
+    System.Text.StringBuilder[] ArrayOfStringBuilders(System.Text.StringBuilder[] someStringBuilders) { return null; }
+
+    private class NestedClass1 {
+        private class NestedClass1_1 {
+            private class NestedClass1_1_1 {
+                void SuperNestedMethod() {
+
+                }
+            }
+        }
+        private class NestedClass1_2{
+            private class NestedClass1_2_1 {
+                void SuperNestedMethod() {
+
+                }
+            }
+        }
+    }
+
+
+    // Use this for initialization
+    void Start () {
+        DependencyAnalyzer analyzer = new DependencyAnalyzer();
@@ -56,0 +100,2 @@ public class ClassB : MonoBehaviour {
+    //todo overloaded methods
+
@@ -65,0 +111,37 @@ public class ClassB : MonoBehaviour {
+    
+    private class anotherClass1 
+        
+        {
+        private int nestedInt;
+        private class NestedInAnotherClass {
+
+        }
+    }
+
+    private class
+
+        anotherClass2 {
+
+    }
+
+    static
+
+    void
+
+        someMethod
+
+        (
+        
+        ) 
+        
+        {
+        int a;if
+            (true
+            ) {
+
+        }
+    }     
+}
+
+public class OutsideClassB {
+
