// Author: Michael Camara
// Repository: https://github.com/michaeljcamara/WhatHappened

using System.Collections.Generic;
using System.IO;
using UnityEngine;
using System;
namespace WhatHappened {
    public class CustomFile {
                 
        public FileInfo info { get; }

        // Patch containing the full patch obtained from diffing this file in GitAnalyzer
        public string diffPatchText { get; set; }

        // List of ALL types (nested and non-nested) in this file
        public List<CustomType> types { get; set; }

        // Keep separate list of top-level types (i.e. those that are NOT nested in other types)
        private List<CustomType> _topLevelTypes;
        private List<CustomType> topLevelTypes {
            get {
                if (_topLevelTypes == null) {
                    _topLevelTypes = new List<CustomType>();
                    foreach (CustomType t in types) {
                        if (!t.assemblyType.IsNested) {
                            _topLevelTypes.Add(t);
                        }
                    }
                }

                return _topLevelTypes;
            }
        }

        public string fullPath { get { return info.FullName; } }

        // Path relative to the /Assets/ directory (needed for opening files on button press)
        private string _assetsRelPath;
        public string assetsRelPath {
            get {
                if (_assetsRelPath == null) {
                    Uri assetsRelUri = new Uri(fullPath);
                    assetsRelUri = assetsUri.MakeRelativeUri(assetsRelUri);
                    _assetsRelPath = assetsRelUri.ToString();
                }

                return _assetsRelPath;
            }
        }

        // Path relative to top-level project directory
        private string _relPath;
        public string relPath {
            get {
                if (_relPath == null) {
                    Uri relUri = new Uri(fullPath);
                    relUri = projectUri.MakeRelativeUri(relUri);
                    _relPath = relUri.ToString();
                }

                return _relPath;
            }
        }

        private static readonly Uri projectUri = new Uri(Path.GetFullPath("."));
        private static readonly Uri assetsUri = new Uri(Application.dataPath);

        public CustomFile(FileInfo file) {
            info = file;
        }


        /// <summary>
        /// Starting with the top-level types in this file, find which CustomType bounds the given line number.
        /// If a match it found within a type, proceed to the deepest nested CustomType
        /// </summary>
        public CustomType GetTypeByLineNumber(int lineNum) {

            CustomType chosenType = null;

            //TODO optimize by always starting at the previous considered type.
            //int lastIndex = 0;
            for (int i = 0; i < topLevelTypes.Count; i++) {
                CustomType currentType = topLevelTypes[i];
                chosenType = currentType.GetDeepestNestedTypeAtLineNum(lineNum);
                if (chosenType != null) {
                    break;
                }
            }

            return chosenType;
        }

        /// <summary>
        /// Open the diff patch for this file, generated by GitAnalyzer
        /// </summary>
        public void OpenDiffPatchInEditor() {
            //TODO generalize this path in case WhatHappened in placed in alternative location
            string path = "Assets/WhatHappened/Resources/tempDiff.txt";
            StreamWriter writer = File.CreateText(path); //File.AppendText(path);

            writer.Write(diffPatchText);
            writer.Flush();
            writer.Close();

            //Re-import the file to update the reference in the editor
            UnityEditor.AssetDatabase.ImportAsset(path);

            //Open the text file with the system's default text editing program
            UnityEditor.AssetDatabase.OpenAsset(UnityEditor.AssetDatabase.LoadAssetAtPath<TextAsset>(path));

            //TextAsset asset = Resources.Load<TextAsset>("tempDiff");
            //UnityEditor.AssetDatabase.OpenAsset(UnityEditor.AssetDatabase.LoadAssetAtPath<TextAsset>(path));

            //Print the text from the file
            //Debug.Log(asset.text);
        }

        /// <summary>
        /// Open this file at the given line number
        /// </summary>
        /// <param name="lineNum"></param>
        public void OpenFileInEditor(int lineNum = 1) {
            UnityEditor.AssetDatabase.OpenAsset(UnityEditor.AssetDatabase.LoadAssetAtPath<TextAsset>(assetsRelPath), lineNum);
        }

        /// <summary>
        /// Reset any additions and deletions to this file's CustomTypes, as detected from the previous diff performed by GitAnalyzer
        /// </summary>
        public void ClearPreviousChanges() {
            foreach (CustomType t in types) {
                t.ClearPreviousChanges();
            }
        }

        public override string ToString() {
            return info.Name;
        }
    }
}